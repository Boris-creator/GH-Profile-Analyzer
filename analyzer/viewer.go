// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package analyzer

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// __getUserInput is used internally by genqlient
type __getUserInput struct {
	Login string `json:"Login"`
}

// GetLogin returns __getUserInput.Login, and is useful for accessing the field via an interface.
func (v *__getUserInput) GetLogin() string { return v.Login }

// __getViewerInput is used internally by genqlient
type __getViewerInput struct {
	Id      string    `json:"id"`
	From    time.Time `json:"from"`
	To      time.Time `json:"to"`
	FromDay time.Time `json:"fromDay"`
}

// GetId returns __getViewerInput.Id, and is useful for accessing the field via an interface.
func (v *__getViewerInput) GetId() string { return v.Id }

// GetFrom returns __getViewerInput.From, and is useful for accessing the field via an interface.
func (v *__getViewerInput) GetFrom() time.Time { return v.From }

// GetTo returns __getViewerInput.To, and is useful for accessing the field via an interface.
func (v *__getViewerInput) GetTo() time.Time { return v.To }

// GetFromDay returns __getViewerInput.FromDay, and is useful for accessing the field via an interface.
func (v *__getViewerInput) GetFromDay() time.Time { return v.FromDay }

// getMyIdResponse is returned by getMyId on success.
type getMyIdResponse struct {
	// The currently authenticated user.
	Viewer getMyIdViewerUser `json:"viewer"`
}

// GetViewer returns getMyIdResponse.Viewer, and is useful for accessing the field via an interface.
func (v *getMyIdResponse) GetViewer() getMyIdViewerUser { return v.Viewer }

// getMyIdViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getMyIdViewerUser struct {
	// The Node ID of the User object
	Id string `json:"id"`
}

// GetId returns getMyIdViewerUser.Id, and is useful for accessing the field via an interface.
func (v *getMyIdViewerUser) GetId() string { return v.Id }

// getUserResponse is returned by getUser on success.
type getUserResponse struct {
	// Lookup a user by login.
	User getUserUser `json:"user"`
}

// GetUser returns getUserResponse.User, and is useful for accessing the field via an interface.
func (v *getUserResponse) GetUser() getUserUser { return v.User }

// getUserUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getUserUser struct {
	// The user's public profile name.
	TheirName string `json:"theirName"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetTheirName returns getUserUser.TheirName, and is useful for accessing the field via an interface.
func (v *getUserUser) GetTheirName() string { return v.TheirName }

// GetCreatedAt returns getUserUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *getUserUser) GetCreatedAt() time.Time { return v.CreatedAt }

// getViewerResponse is returned by getViewer on success.
type getViewerResponse struct {
	// The currently authenticated user.
	Viewer getViewerViewerUser `json:"viewer"`
}

// GetViewer returns getViewerResponse.Viewer, and is useful for accessing the field via an interface.
func (v *getViewerResponse) GetViewer() getViewerViewerUser { return v.Viewer }

// getViewerViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getViewerViewerUser struct {
	// The user's public profile name.
	MyName string `json:"MyName"`
	// The username used to login.
	Login string `json:"login"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
	// The collection of contributions this user has made to different repositories.
	ContributionsCollection getViewerViewerUserContributionsCollection `json:"contributionsCollection"`
	// A list of repositories that the user owns.
	Repositories getViewerViewerUserRepositoriesRepositoryConnection `json:"repositories"`
}

// GetMyName returns getViewerViewerUser.MyName, and is useful for accessing the field via an interface.
func (v *getViewerViewerUser) GetMyName() string { return v.MyName }

// GetLogin returns getViewerViewerUser.Login, and is useful for accessing the field via an interface.
func (v *getViewerViewerUser) GetLogin() string { return v.Login }

// GetCreatedAt returns getViewerViewerUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *getViewerViewerUser) GetCreatedAt() time.Time { return v.CreatedAt }

// GetContributionsCollection returns getViewerViewerUser.ContributionsCollection, and is useful for accessing the field via an interface.
func (v *getViewerViewerUser) GetContributionsCollection() getViewerViewerUserContributionsCollection {
	return v.ContributionsCollection
}

// GetRepositories returns getViewerViewerUser.Repositories, and is useful for accessing the field via an interface.
func (v *getViewerViewerUser) GetRepositories() getViewerViewerUserRepositoriesRepositoryConnection {
	return v.Repositories
}

// getViewerViewerUserContributionsCollection includes the requested fields of the GraphQL type ContributionsCollection.
// The GraphQL type's documentation follows.
//
// A contributions collection aggregates contributions such as opened issues and commits created by a user.
type getViewerViewerUserContributionsCollection struct {
	// A calendar of this user's contributions on GitHub.
	ContributionCalendar getViewerViewerUserContributionsCollectionContributionCalendar `json:"contributionCalendar"`
}

// GetContributionCalendar returns getViewerViewerUserContributionsCollection.ContributionCalendar, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserContributionsCollection) GetContributionCalendar() getViewerViewerUserContributionsCollectionContributionCalendar {
	return v.ContributionCalendar
}

// getViewerViewerUserContributionsCollectionContributionCalendar includes the requested fields of the GraphQL type ContributionCalendar.
// The GraphQL type's documentation follows.
//
// A calendar of contributions made on GitHub by a user.
type getViewerViewerUserContributionsCollectionContributionCalendar struct {
	// A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
	Colors []string `json:"colors"`
	// The count of total contributions in the calendar.
	TotalContributions int `json:"totalContributions"`
	// A list of the weeks of contributions in this calendar.
	Weeks []getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek `json:"weeks"`
}

// GetColors returns getViewerViewerUserContributionsCollectionContributionCalendar.Colors, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserContributionsCollectionContributionCalendar) GetColors() []string {
	return v.Colors
}

// GetTotalContributions returns getViewerViewerUserContributionsCollectionContributionCalendar.TotalContributions, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserContributionsCollectionContributionCalendar) GetTotalContributions() int {
	return v.TotalContributions
}

// GetWeeks returns getViewerViewerUserContributionsCollectionContributionCalendar.Weeks, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserContributionsCollectionContributionCalendar) GetWeeks() []getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek {
	return v.Weeks
}

// getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek includes the requested fields of the GraphQL type ContributionCalendarWeek.
// The GraphQL type's documentation follows.
//
// A week of contributions in a user's contribution graph.
type getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek struct {
	// The days of contributions in this week.
	ContributionDays []getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay `json:"contributionDays"`
	// The date of the earliest square in this week.
	FirstDay string `json:"firstDay"`
}

// GetContributionDays returns getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek.ContributionDays, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek) GetContributionDays() []getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay {
	return v.ContributionDays
}

// GetFirstDay returns getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek.FirstDay, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeek) GetFirstDay() string {
	return v.FirstDay
}

// getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay includes the requested fields of the GraphQL type ContributionCalendarDay.
// The GraphQL type's documentation follows.
//
// Represents a single day of contributions on GitHub by a user.
type getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay struct {
	// The hex color code that represents how many contributions were made on this day compared to others in the calendar.
	Color string `json:"color"`
	// How many contributions were made by the user on this day.
	ContributionCount int `json:"contributionCount"`
	// The day this square represents.
	Date string `json:"date"`
	// A number representing which day of the week this square represents, e.g., 1 is Monday.
	Weekday int `json:"weekday"`
}

// GetColor returns getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay.Color, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay) GetColor() string {
	return v.Color
}

// GetContributionCount returns getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay.ContributionCount, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay) GetContributionCount() int {
	return v.ContributionCount
}

// GetDate returns getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay.Date, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay) GetDate() string {
	return v.Date
}

// GetWeekday returns getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay.Weekday, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserContributionsCollectionContributionCalendarWeeksContributionCalendarWeekContributionDaysContributionCalendarDay) GetWeekday() int {
	return v.Weekday
}

// getViewerViewerUserRepositoriesRepositoryConnection includes the requested fields of the GraphQL type RepositoryConnection.
// The GraphQL type's documentation follows.
//
// A list of repositories owned by the subject.
type getViewerViewerUserRepositoriesRepositoryConnection struct {
	// A list of nodes.
	Nodes []getViewerViewerUserRepositoriesRepositoryConnectionNodesRepository `json:"nodes"`
}

// GetNodes returns getViewerViewerUserRepositoriesRepositoryConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnection) GetNodes() []getViewerViewerUserRepositoriesRepositoryConnectionNodesRepository {
	return v.Nodes
}

// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getViewerViewerUserRepositoriesRepositoryConnectionNodesRepository struct {
	// The name of the repository.
	Name string `json:"name"`
	// The primary language of the repository's code.
	PrimaryLanguage getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryPrimaryLanguage `json:"primaryLanguage"`
	// A list containing a breakdown of the language composition of the repository.
	Languages getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnection `json:"languages"`
	// The Ref associated with the repository's default branch.
	DefaultBranchRef getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef `json:"defaultBranchRef"`
}

// GetName returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepository.Name, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepository) GetName() string {
	return v.Name
}

// GetPrimaryLanguage returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepository.PrimaryLanguage, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepository) GetPrimaryLanguage() getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryPrimaryLanguage {
	return v.PrimaryLanguage
}

// GetLanguages returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepository.Languages, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepository) GetLanguages() getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnection {
	return v.Languages
}

// GetDefaultBranchRef returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepository.DefaultBranchRef, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepository) GetDefaultBranchRef() getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef {
	return v.DefaultBranchRef
}

// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Represents a Git reference.
type getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef struct {
	// The ref name.
	Name string `json:"name"`
	// The object the ref points to. Returns null when object does not exist.
	Target getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject `json:"-"`
}

// GetName returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef.Name, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef) GetName() string {
	return v.Name
}

// GetTarget returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef.Target, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef) GetTarget() getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject {
	return v.Target
}

func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef
		Target json.RawMessage `json:"target"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Target
		src := firstPass.Target
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalgetViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef.Target: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef struct {
	Name string `json:"name"`

	Target json.RawMessage `json:"target"`
}

func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef) __premarshalJSON() (*__premarshalgetViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef, error) {
	var retval __premarshalgetViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef

	retval.Name = v.Name
	{

		dst := &retval.Target
		src := v.Target
		var err error
		*dst, err = __marshalgetViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRef.Target: %w", err)
		}
	}
	return &retval, nil
}

// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob includes the requested fields of the GraphQL type Blob.
// The GraphQL type's documentation follows.
//
// Represents a Git blob.
type getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob.Typename, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob) GetTypename() string {
	return v.Typename
}

// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit struct {
	Typename string `json:"__typename"`
	// The linear commit history starting from (and including) this commit, in the same order as `git log`.
	History getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection `json:"history"`
}

// GetTypename returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit.Typename, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit) GetTypename() string {
	return v.Typename
}

// GetHistory returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit.History, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit) GetHistory() getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection {
	return v.History
}

// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection includes the requested fields of the GraphQL type CommitHistoryConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Commit.
type getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection struct {
	// A list of nodes.
	Nodes []getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit `json:"nodes"`
}

// GetNodes returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnection) GetNodes() []getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit {
	return v.Nodes
}

// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit struct {
	// The Git object ID
	Oid string `json:"oid"`
}

// GetOid returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit.Oid, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommitHistoryCommitHistoryConnectionNodesCommit) GetOid() string {
	return v.Oid
}

// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject includes the requested fields of the GraphQL interface GitObject.
//
// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject is implemented by the following types:
// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob
// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit
// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag
// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree
// The GraphQL type's documentation follows.
//
// Represents a Git object.
type getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject interface {
	implementsGraphQLInterfacegetViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob) implementsGraphQLInterfacegetViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject() {
}
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit) implementsGraphQLInterfacegetViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject() {
}
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag) implementsGraphQLInterfacegetViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject() {
}
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree) implementsGraphQLInterfacegetViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject() {
}

func __unmarshalgetViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject(b []byte, v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Blob":
		*v = new(getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob)
		return json.Unmarshal(b, *v)
	case "Commit":
		*v = new(getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit)
		return json.Unmarshal(b, *v)
	case "Tag":
		*v = new(getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag)
		return json.Unmarshal(b, *v)
	case "Tree":
		*v = new(getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GitObject.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject: "%v"`, tn.TypeName)
	}
}

func __marshalgetViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject(v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob:
		typename = "Blob"

		result := struct {
			TypeName string `json:"__typename"`
			*getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetBlob
		}{typename, v}
		return json.Marshal(result)
	case *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit:
		typename = "Commit"

		result := struct {
			TypeName string `json:"__typename"`
			*getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetCommit
		}{typename, v}
		return json.Marshal(result)
	case *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag:
		typename = "Tag"

		result := struct {
			TypeName string `json:"__typename"`
			*getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag
		}{typename, v}
		return json.Marshal(result)
	case *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree:
		typename = "Tree"

		result := struct {
			TypeName string `json:"__typename"`
			*getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetGitObject: "%T"`, v)
	}
}

// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag includes the requested fields of the GraphQL type Tag.
// The GraphQL type's documentation follows.
//
// Represents a Git tag.
type getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag.Typename, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTag) GetTypename() string {
	return v.Typename
}

// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree includes the requested fields of the GraphQL type Tree.
// The GraphQL type's documentation follows.
//
// Represents a Git tree.
type getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree.Typename, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryDefaultBranchRefTargetTree) GetTypename() string {
	return v.Typename
}

// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnection includes the requested fields of the GraphQL type LanguageConnection.
// The GraphQL type's documentation follows.
//
// A list of languages associated with the parent.
type getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnection struct {
	// A list of edges.
	Edges []getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge `json:"edges"`
}

// GetEdges returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnection.Edges, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnection) GetEdges() []getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge {
	return v.Edges
}

// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge includes the requested fields of the GraphQL type LanguageEdge.
// The GraphQL type's documentation follows.
//
// Represents the language of a repository.
type getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge struct {
	Node getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage `json:"node"`
	// The number of bytes of code written in the language.
	Size int `json:"size"`
}

// GetNode returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge.Node, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge) GetNode() getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage {
	return v.Node
}

// GetSize returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge.Size, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdge) GetSize() int {
	return v.Size
}

// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage includes the requested fields of the GraphQL type Language.
// The GraphQL type's documentation follows.
//
// Represents a given language found in repositories.
type getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage struct {
	// The name of the current language.
	Name string `json:"name"`
}

// GetName returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage.Name, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryLanguagesLanguageConnectionEdgesLanguageEdgeNodeLanguage) GetName() string {
	return v.Name
}

// getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryPrimaryLanguage includes the requested fields of the GraphQL type Language.
// The GraphQL type's documentation follows.
//
// Represents a given language found in repositories.
type getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryPrimaryLanguage struct {
	// The name of the current language.
	Name string `json:"name"`
}

// GetName returns getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryPrimaryLanguage.Name, and is useful for accessing the field via an interface.
func (v *getViewerViewerUserRepositoriesRepositoryConnectionNodesRepositoryPrimaryLanguage) GetName() string {
	return v.Name
}

// The query or mutation executed by getMyId.
const getMyId_Operation = `
query getMyId {
	viewer {
		id
	}
}
`

// getUser gets my user node id.
func getMyId(
	ctx_ context.Context,
	client_ graphql.Client,
) (*getMyIdResponse, error) {
	req_ := &graphql.Request{
		OpName: "getMyId",
		Query:  getMyId_Operation,
	}
	var err_ error

	var data_ getMyIdResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getUser.
const getUser_Operation = `
query getUser ($Login: String!) {
	user(login: $Login) {
		theirName: name
		createdAt
	}
}
`

// getUser gets the given user's name from their username.
func getUser(
	ctx_ context.Context,
	client_ graphql.Client,
	Login string,
) (*getUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "getUser",
		Query:  getUser_Operation,
		Variables: &__getUserInput{
			Login: Login,
		},
	}
	var err_ error

	var data_ getUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getViewer.
const getViewer_Operation = `
query getViewer ($id: ID, $from: DateTime, $to: DateTime, $fromDay: GitTimestamp) {
	viewer {
		MyName: name
		login
		createdAt
		contributionsCollection(from: $from, to: $to) {
			contributionCalendar {
				colors
				totalContributions
				weeks {
					contributionDays {
						color
						contributionCount
						date
						weekday
					}
					firstDay
				}
			}
		}
		repositories(first: 100) {
			nodes {
				name
				primaryLanguage {
					name
				}
				languages(first: 100) {
					edges {
						node {
							name
						}
						size
					}
				}
				defaultBranchRef {
					name
					target {
						__typename
						... on Commit {
							history(first: 100, author: {id:$id}, since: $fromDay) {
								nodes {
									oid
								}
							}
						}
					}
				}
			}
		}
	}
}
`

// get my profile data
func getViewer(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
	from time.Time,
	to time.Time,
	fromDay time.Time,
) (*getViewerResponse, error) {
	req_ := &graphql.Request{
		OpName: "getViewer",
		Query:  getViewer_Operation,
		Variables: &__getViewerInput{
			Id:      id,
			From:    from,
			To:      to,
			FromDay: fromDay,
		},
	}
	var err_ error

	var data_ getViewerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
